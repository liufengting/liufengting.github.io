{"pages":[{"title":"About","text":"About Me I am the owner of this blog. I am an iOS programmer, now live in Wuxi China, work at WuXi National Sofeware Square. I have been coding iOS programs since May, 2013. I have some open source software on Github. I will continue making some open source libraries, and more iOS softwares are coming up.You may follow me at : Github Facebook Twitter Google plus Instagram 知乎 新浪微博 QQ : 157121900 The blog theme came from here. Preview","link":"/about/index.html"},{"title":"Categories","text":"","link":"/categories/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Journal 2018-02-02","text":"2018-02-02今天是我生日。 也许人生就是这样，习惯拥有的，不懂得珍惜，努力追逐的，一直得不到。人生就是在这样的得到与失去中，间歇性的获得满足与遗憾。 辞职了一个月了，需要重新找回自己。 祝好运。","link":"/2018/08/22/Journal/2018-02-02/"},{"title":"Journal 2017-10-09","text":"2017-10-09工作最近也是没有什么激情。没有什么挑战，或者说是我有点畏缩不前，很多可以做的自己也懒得去做了。很多可以争取的时间也不再纠结了。 也许这样过于消极，但是人生又何尝不是。 祝好运！","link":"/2018/08/22/Journal/2017-10-09/"},{"title":"FTImageViewer","text":"FTImageViewerFTImageViewer can preview images with just one lines of code. Also FTImageViewGrid has make showing images in a grid much easier. I wrote this for my future projects. Feel free to try it in your own projects! Feathers Single tap to dismiss and auto return to the current index Double tap to zoom in and double tap again to zoom out Pinch to zoom in/out Button tap to dismiss Button tap to save current image to system Photo Album Pan up/down to dismiss (like Facebook or QQZone) Pan left/right to dismiss at first/last page ScreenShots run the demo in FTImageViewerDemo to see more ##Usage show images in a grid and preview images with one line of code 1234imageGridView.showWithImageArray(imageArray) { (buttonsArray, buttonIndex) in // in this tap block, preview images with one line of code FTImageViewer.sharedInstance.showImages(self.imageArray, atIndex: buttonIndex, fromSenderArray: buttonsArray)} see more docs in FTImageViewerDemo/DemoTableViewCell.swift ##Installation ###Manually clone this repo. Simply drop the FTImageViewer folder into your project. Enjoy！ ###Cocoapods FTImageViewer is available through CocoaPods. To install it, simply add the following line to your Podfile: 1pod 'FTImageViewer' BounsIn FTImageViewerDemo, shows you how to use it in tableview, using pure AutoLayout. Here is the screenshot: LicenseFTImageViewer is available under the MIT license. See the LICENSE file for more info. Project RepoSee More Here: FTImageViewer","link":"/2018/08/22/Project/Project-FTImageViewer/"},{"title":"FTChatMessageDemoProject","text":"FTChatMessageDemoProject I design and implement this message ui framework on my own. I was hoping to use it for my future projects. Feel feel to clone this project and try this in your own projects. Working in progressStill working in progress. Please be patient. 2016.05.08 – I hope I can finish this up by the end of May. I was not so focused lately. There is not much work left now. I really wanna write some more functions. Keep calm and carry on! ScreenShots Update Log 2016.04.06 – now supports images 2016.04.08 – add time and sender name support 2016.04.09 – change input bar into UIToolBar instead of UIView 2016.04.12 – it’s getting better 2016.04.19 – I have been busy. 2016.04.20 – add record view. functions and animations not ready. 2016.04.26 – switch input view done ! 2016.04.27 – add deliver status and finish accessory view ! it’s 4.28 now… 2016.05.02 – Audio! 2016.05.08 – fix something, test something 2016.05.__ – more media ui coming up Preview Project RepoCheck this out : FTChatMessageDemoProject","link":"/2018/08/22/Project/Project-FTChatMessage/"},{"title":"FTIndicator","text":"FTIndicatorA light wight UI package contains local notification, progress HUD, toast, with blur effect, elegant API and themes Support for iOS. Inspired by Apple’s process HUD, notifications and Android’s toast. 3 IN 1 If you want use all three of the indicators, use FTIndicator . Also, FTNotificationIndicator, FTProgressIndicator and FTToastIndicator are able to work separately. Use them all your will. FTIndicator FTNotificationIndicatorFTProgressIndicatorFTToastIndicator ScreenShotsPortrait Style Light Dark Notification Progress Toast Landscape Style Light Dark Notification Progress Toast InstallationManually clone this repo. Simply drop the ‘/FTIndicator’ folder into your project. import ‘FTIndicator.h’ CocoaPodsFTIndicator is available through CocoaPods. To install it, simply add the following line to your Podfile: Use FTIndicator, all three of them FTIndicator, 3 in 1 1pod 'FTIndicator' Use separately FTNotificationIndicator 12pod 'FTNotificationIndicator' 1234# or use as a subPodpod 'FTIndicator/FTNotificationIndicator' FTProgressIndicator 12pod 'FTProgressIndicator' 1234# or use as a subPodpod 'FTIndicator/FTProgressIndicator' FTToastIndicator 12pod 'FTToastIndicator' 1234# or use as a subPodpod 'FTIndicator/FTToastIndicator' UsageUse FTIndicatorNotification show without image 12[FTIndicator showNotificationWithTitle:@&quot;Here is a notification title.&quot; message:@&quot;Here is a notification message.&quot;]; show with image 123[FTIndicator showNotificationWithImage:[UIImage imageNamed:@&quot;maps_icon&quot;] title:@&quot;Here is a notification title.&quot; message:@&quot;Here is a notification message.&quot;]; show with image, with tap handler and completion handler 12345678[FTIndicator showNotificationWithImage:[UIImage imageNamed:@&quot;maps_icon&quot;] title:@&quot;Here is a notification title.&quot; message:@&quot;Here is a notification message. Try to tap and see tap handling or do nothing to see completion&quot; tapHandler:^{ // handle user tap } completion:^{ // handle completion }]; dismiss manually 1[FTIndicator dismissNotification]; Progress show progress 12[FTIndicator showProgressWithmessage:@&quot;Here is a progress message.&quot;]; 1234// or disable user interactions[FTIndicator showProgressWithmessage:@&quot;Here is a progress message.&quot; userInteractionEnable:NO]; show success 12[FTIndicator showSuccessWithMessage:@&quot;Here is a success message.&quot;]; 1234// or disable user interactions[FTIndicator showSuccessWithMessage:@&quot;Here is a success message.&quot; userInteractionEnable:NO]; show info 12[FTIndicator showInfoWithMessage:@&quot;Here is a info message.&quot;]; 1234// or disable user interactions[FTIndicator showInfoWithMessage:@&quot;Here is a info message.&quot; userInteractionEnable:NO]; show error 12[FTIndicator showErrorWithMessage:@&quot;Here is a error message.&quot;]; 1234// or disable user interactions[FTIndicator showErrorWithMessage:@&quot;Here is a error message.&quot; userInteractionEnable:NO]; dismiss manually 1[FTIndicator dismissProgress]; Toast show with image 1[FTIndicator showToastMessage:@&quot;Short Toast.&quot;]; dismiss manually 1[FTIndicator dismissToast]; Use FTNotificationIndicator, FTProgressIndicator, FTToastIndicator separatelyFTNotificationIndicator show with image 123[FTNotificationIndicator showNotificationWithImage:[UIImage imageNamed:@&quot;maps_icon&quot;] title:@&quot;Here is a notification title.&quot; message:@&quot;Here is a notification message.&quot;]; show without image 12[FTNotificationIndicator showNotificationWithTitle:@&quot;Here is a notification title.&quot; message:@&quot;Here is a notification message.&quot;]; dismiss manually 1[FTNotificationIndicator dismiss]; FTProgressIndicator show progress 1[FTProgressIndicator showProgressWithmessage:@&quot;Here is a progress message.&quot;]; 12// or disable user interactions[FTProgressIndicator showProgressWithmessage:@&quot;Here is a progress message.&quot; userInteractionEnable:NO]; show success 1[FTProgressIndicator showSuccessWithMessage:@&quot;Here is a success message.&quot;]; 12// or disable user interactions[FTProgressIndicator showSuccessWithMessage:@&quot;Here is a success message.&quot; userInteractionEnable:NO]; show info 1[FTProgressIndicator showInfoWithMessage:@&quot;Here is a info message.&quot;]; 12// or disable user interactions[FTProgressIndicator showInfoWithMessage:@&quot;Here is a info message.&quot; userInteractionEnable:NO]; show error 1[FTProgressIndicator showErrorWithMessage:@&quot;Here is a error message.&quot;]; 12// or disable user interactions[FTProgressIndicator showErrorWithMessage:@&quot;Here is a error message.&quot; userInteractionEnable:NO]; dismiss manually 1[FTProgressIndicator dismiss]; FTToastIndicator show with image 1[FTToastIndicator showToastMessage:@&quot;Short Toast.&quot;]; dismiss manually 1[FTToastIndicator dismiss]; CHANGELOGCHANGELOG License FTIndicator is available under the MIT license. See the LICENSE file for more info. FTNotificationIndicator is available under the MIT license. See the LICENSE file for more info. FTProgressIndicator is available under the MIT license. See the LICENSE file for more info. FTToastIndicator is available under the MIT license. See the LICENSE file for more info. Project RepoSee More Here: FTIndicator","link":"/2018/08/22/Project/Project-FTIndicator/"},{"title":"FTPickerView","text":"FTPickerViewA simple UIPickerView/UIDatePicker wapper wrote by me. Features singleton block callbacks ScreenShots Useage Simple Picker 12345678//simple pickerNSArry *nameArray = @[@\"optionA\",@\"optionB\",@\"some other option\"][[FTPickerView sharedInstance] showWithTitle:@\"i am title\" nameArray:nameArray doneBlock:^(NSInteger selectedIndex) { NSLog(@\"the selected string is: %@\",nameArray[selectedIndex]); } cancelBlock:^{ }]; Date Picker 12345678910//date picker[[FTDatePickerView sharedInstance] showWithTitle:@\"选择日期\" selectDate:[NSDate date] datePickerMode:UIDatePickerModeDateAndTime doneBlock:^(NSDate *selectedDate) { NSDateFormatter *f = [[NSDateFormatter alloc]init]; [f setDateFormat:@\"yyyy年MM月dd日 HH:mm:ss\"]; NSLog(@\"the selected date is: %@\",[f stringFromDate:selectedDate]); } cancelBlock:^{ }]; InstallationManual Drag ‘FTPickerView’ file to you project, Import ‘FTPickerView.h’, Enjoy！ 🍺 Cocoapods add the following line to you podFile 1pod &apos;FTPickerView&apos;, &apos;~&gt; 0.1.1&apos; LicenseFTPickerView is available under the MIT license. See the LICENSE file for more info. Project RepoView detial at : FTPickerView","link":"/2018/08/22/Project/Project-FTPickerView/"},{"title":"FTPopOverMenu","text":"FTPopOverMenuFTPopOverMenu is a pop over menu for iOS which is maybe the easiest one to use, supports both portrait and landscape. It can show from any UIView, any UIBarButtonItem and any CGRect. Simplest APIs, enable you to change the style in one line of code. Installation- Manually clone this repo. Simply drop the ‘/FTPopOverMenu’ folder into your project. import ‘FTPopOverMenu.h’ Enjoy！ - CocoapodsFTPopOverMenu is available through CocoaPods. To install it, simply add the following line to your Podfile: 1pod \"FTPopOverMenu\" UsageCustomizeDo any of the following settings to set the style (Only set the ones you want to change), maybe do this when app starts or when you want it to show a different style, but remember it’s global change. 12345678910FTPopOverMenuConfiguration *configuration = [FTPopOverMenuConfiguration defaultConfiguration];configuration.menuRowHeight = ...configuration.menuWidth = ...configuration.textColor = ...configuration.textFont = ...configuration.tintColor = ...configuration.borderColor = ...configuration.borderWidth = ...configuration.textAlignment = ...configuration.ignoreImageOriginalColor = ...;// set &apos;ignoreImageOriginalColor&apos; to YES, images color will be same as textColor setTintColor, default is gray color. deprecated after 1.2.01[FTPopOverMenu setTintColor:[UIColor redColor]]; setTextColor, default is white color. deprecated after 1.2.01[FTPopOverMenu setTextColor:[UIColor blackColor]]; setPreferedWidth, default is 120, should not be less than 50. deprecated after 1.2.01[FTPopOverMenu setPreferedWidth:200]; From SenderView, Menu Without Images.1234567[FTPopOverMenu showForSender:sender withMenu:@[@&quot;MenuOne&quot;,@&quot;MenuTwo&quot;,@&quot;MenuThr&quot;] doneBlock:^(NSInteger selectedIndex) { } dismissBlock:^{ }]; From SenderView, Menu With Images.12345678[FTPopOverMenu showForSender:sender withMenu:@[@&quot;MenuOne&quot;,@&quot;MenuTwo&quot;,@&quot;MenuThr&quot;] imageNameArray:@[@&quot;setting_icon&quot;,@&quot;setting_icon&quot;,@&quot;setting_icon&quot;] doneBlock:^(NSInteger selectedIndex) { } dismissBlock:^{ }]; From SenderFrame/NavigationItem, Menu Without Images.1234567[FTPopOverMenu showFromSenderFrame:CGRectMake(self.view.frame.size.width - 40, 20, 40, 40) withMenu:@[@&quot;123&quot;,@&quot;234&quot;,@&quot;345&quot;] doneBlock:^(NSInteger selectedIndex) { } dismissBlock:^{ }]; From SenderFrame/NavigationItem, Menu With Images.12345678[FTPopOverMenu showFromSenderFrame:CGRectMake(self.view.frame.size.width - 40, 20, 40, 40) withMenu:@[@&quot;123&quot;,@&quot;234&quot;,@&quot;345&quot;] imageNameArray:@[@&quot;setting_icon&quot;,@&quot;setting_icon&quot;,@&quot;setting_icon&quot;] doneBlock:^(NSInteger selectedIndex) { } dismissBlock:^{ }]; From barButtonItems . First: add action with event to you barButtonItems 1[self.navigationItem setRightBarButtonItem:[[UIBarButtonItem alloc] initWithTitle:@&quot;Edit&quot; style:UIBarButtonItemStyleDone target:self action:@selector(onNavButtonTapped:event:)]]; Second: implement the action 123456789101112-(void)onNavButtonTapped:(UIBarButtonItem *)sender event:(UIEvent *)event{ [FTPopOverMenu showFromEvent:event withMenu:@[@&quot;123&quot;,@&quot;234&quot;,@&quot;345&quot;] imageNameArray:@[@&quot;setting_icon&quot;,@&quot;setting_icon&quot;,@&quot;setting_icon&quot;] doneBlock:^(NSInteger selectedIndex) { } dismissBlock:^{ }];} CHANGELOGCHANGELOG ScreenShots More Images in the demo from https://www.iconfinder.com/iconsets/pokemon-go. If you like it, or maybe wanna use it in your own projects, please give me a star. Looking for another way of doing this? Take a look at my another FTPopMenu at here. It was another way of showing pop over menus, which is wrapped from UIPopoverViewController, and more genetic and more good-looking. Feel free to try it. LicenseFTPopOverMenu is available under the MIT license. See the LICENSE file for more info. Project RepoSee More Here: FTPopOverMenu","link":"/2018/08/22/Project/Project-FTPopOverMenu/"},{"title":"Journal 2018-08-03","text":"2018-08-03最近翻看之前写的日记，注释了很多内容，发现有时候写日记就如同发朋友圈，只是一时兴起，过了那段时间，自己看了都想删掉。在这个并没有什么访问量的个人博客里写东西，就如同一个人宅在家里，想说的话对自己说，想吃的外卖点给自己吃。最近工作上的失望越来越多，有时候在满怀希望的同时收获失望是一种难以接受的感觉。 先写这么多，祝好运。","link":"/2018/08/26/Journal/2018-08-03/"},{"title":"Collecting Resources online","text":"Collecting Resource Online网络RealReachabilityWe need to observe the REAL reachability of network for iOS. That’s what RealReachability do.RealReachability JSPatchJSPatch bridges Objective-C and JavaScript using the Objective-C runtime. You can call any Objective-C class and method in JavaScript by just including a small engine. That makes the APP obtaining the power of script language: add modules or replacing Objective-C code to fix bugs dynamically.JSPatch 视频WMPlayerWMPlayer视频播放器，AVPlayer的封装，继承UIView，想怎么玩就怎么玩。支持播放mp4、m3u8、3gp、mov，网络和本地视频同时支持。全屏和小屏播放同时支持。 cell中播放视频，全屏小屏切换自如。WMPlayer LiveVideoCoreSDK基于IOS的手机视频直播SDK.LiveVideoCoreSDK UIJMRoundedCorner用GraphicsContext生成一张带圆角的图,设置view.layer.contents为这张图片。JMRoundedCorner CircleMenuThe project maintained by app development agency Ramotion Inc. See our other open-source projects or hire us to design, develop, and grow your product.CircleMenu","link":"/2018/08/22/Resource/Resource-Collecting-resources-online/"},{"title":"About Git","text":"About Git安装Git Linux $ sudo yum install git 或者 $ sudo apt-get install git Mac 直接在Terminal执行git命令, 如果没有会提示安装方法.如果喜欢安装程序的话, 点这里 配置文件第一次安装, 千万别要忘了配置你的git的使用者名字和邮箱. 这个道理很简单, 每一次的提交时需要记录提交者的, 如果没有提交者, 那么bug出现找谁来背锅?? 查看configGit 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 $ git config --system --list ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 $ git config --global --list 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。 每一个级别覆盖上一级别的配置，所以.git/config的配置变量会覆盖/etc/gitconfig中的配置变量。 当然, 也可以查看某一项配置信息. 形式:git config [--global|--system] &lt;key&gt; 查看最终的配置属性值$ git config user.name 查看当前系统的属性值$ git config --global user.name 设置用户信息$ git config --global user.name &quot;name&quot; $ git config --global user.email xxx@163.com 使用--global选项, 当以后在该系统上做的任何操作都会使用此属性. 如果你需要在某一个特定的项目使用其他名字和邮箱, 那么可以通过设置项目中的config文件, 这样config中的属性会覆盖掉global的全局属性, 并且当在其他项目中并不会造成影响. 使用方式只需要去掉--global参数即可修改项目中的.git/config文件 $ git config user.name &quot;name&quot; 获取帮助手册 形式: git help &lt;verb&gt; 或者 git &lt;verb&gt; --help 比如查看config手册 $ git help config Git别名例如: 生成别名之后可以在日后用简短的表示来使用 123$ git config --global alias.br branch$ git config --global alias.ci commit$ git config --global alias.st status .gitignore文件对于自动生成的文件, 日志, 编译的临时文件等. 可以对其进行配置, 让git不追踪这些文件 规范如下: 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 匹配模式可以以（/）开头防止递归。 匹配模式可以以（/）结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反 glob模式是指shell所使用的简化了的正则表达式. * :匹配零个或多个任意字符 [abc] :只匹配括号内的任意一个字符 [0-9] :使用短划线表示范围, 可以匹配0到9之间的任何字符. ? :匹配任意一个字符 **:匹配任意的中间目录,例如a/**/z可以匹配a/z,a/b/z,a/b/c/z等 如下给出一个样板: 1234567891011121314151617# 忽略所有以 .c结尾的文件*.c# 但是 stream.c 会被git追踪!stream.c# 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO/TODO# 忽略所有在build文件夹下的文件build/# 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txtdoc/*.txt# 忽略所有在doc目录下的.pdf文件doc/**/*.pdf 仓库的基础操作初始化仓库1$ git init 添加文件到暂存区12345678# 添加全部暂存区和历史区不存在的或者有更改的 `.c`结尾的文件$ git add *.c# 添加全部暂存区和历史区不存在的或者有更改的文件$ git add . # 指定文件添加$ git add test.c status仓库1234$ git status# 如果需要显示一种紧凑式格式$ git status --short # 等价于 $ git status -s 紧凑式中字母的表示含义如下: ?? :表示新添加的未追踪的文件 M :M出现在右边,表示该文件被修改但是还没有放入暂存区 M :M出现在左边,表示文件被修改已经放入了暂存区 MM :出现两个,代表此文件在工作区修改已经放入了暂存区, 但之后有进行了修改,没有添加到暂存区 diff仓库如果你想知道文件具体修改的内容, 那么diff会很有用 12345# 查看以追踪但尚未暂存的文件更新了哪些部分, 不添加额外参数$ git diff# 对使用了add添加到了暂存区的内容, 使用--staged参数或者--cached$ git diff --staged 提交更新12345678# 常规做法$ git commit -m &quot;commit message&quot;# 如果不使用-m参数添加提交信息, git会使用默认的编译器如vi进行提交描述编写.# 可通过$ git config --global core.edit 设定喜欢的编译器# 跳过暂存区操作, 直接从工作区提交到历史区$ git commit -a -m &quot;&quot; #等价于: $ git commit -am &quot;&quot; 移除文件如果在工作区间对一个文件进行删除, 需要先进行add,然后才可以提交. 使用git rm可以直接在工作区间删除文件, 并提交到暂存区. 12345678$ git rm fileName# 如果文件修改,并添加了暂存区, 需要使用-f参数来强制删除(force)$ git rm -f fileName# 可以使用glob模式,如下$ git rm log/\\*.log # 删除log目录下所有名称是.log结尾文件$ git rm \\*~ # 删除以~结尾的所有文件 移动文件同样使用git rm会方便很多, 并且如果相对文件重命名也可以如此 1$ git mv file_from file_to 当执行了这条语句之后, 只需要在下一次commit即可, 不需要考虑额外操作. 等价于如下: 123$ mv file_from file_to$ git rm file_from$ git rm file_to 查看历史提交如果是最基本的git log, 那么会按提交时间列出所有更新, 包括提交的SHA-1校验和, 作者名称,邮箱,提交时间,提交说明. 下面说说常用选项. 123456789101112# -p:仅显示最近x次的提交 格式 $ git log -p -x$ git log -p -2 # 查看最近的两次提交内容# --stat:简略的显示每次提交的内容更改, 如哪些文件变更,多少删除,多少添加等$ git log --stat# --pretty: 指定默认不同格式展示信息$ git log --pretty=oneline #每次提交用一行显示$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot; # 效果:1a99c42 - 苏, 19 hours ago : 无意义提交 关于format对应的常用占位符的写法和意义 选项 说明 %H 提交对象（commit）的完整哈希字串 %h 提交对象的简短哈希字串 %T 树对象（tree）的完整哈希字串 %t 树对象的简短哈希字串 %P 父对象（parent）的完整哈希字串 %p 父对象的简短哈希字串 %an 作者（author）的名字 %ae 作者的电子邮件地址 %ad 作者修订日期（可以用 –date= 选项定制格式） %ar 作者修订日期，按多久以前的方式显示 %cn 提交者(committer)的名字 %ce 提交者的电子邮件地址 %cd 提交日期 %cr 提交日期，按多久以前的方式显示 %s 提交说明 图形展示分支的合并历史 1$ git log --graph --oneline #oneline只是让输出看起来比较舒服 git log的一些其他操作 选项 说明 -p 按补丁格式显示每个更新之间的差异。 –stat 显示每次更新的文件修改统计信息。 –shortstat 只显示 –stat 中最后的行数修改添加移除统计。 –name-only 仅在提交信息后显示已修改的文件清单。 –name-status 显示新增、修改、删除的文件清单。 –abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。 –relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。 –graph 显示 ASCII 图形表示的分支合并历史。 –pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。 查找一个字符串的出现和删除的提交 12345# 使用限制符-S后面紧跟要查询的字符串$ git log -Smethod_name# 或者针对一个文件进行更改的提交查询, 只需要在后面追加文件名称即可$ git log fileName 哈哈,即使如果你不小心写个隐藏bug不管几个月之后,如果老大要想找出问题是写引发的其实很简单.例如这样$ git log -p fileName 想甩锅?算了吧,还是认错以后多注意吧. 还有一些限制log输出的选项 选项 说明 -(n) 仅显示最近的 n 条提交 –since, –after 仅显示指定时间之后的提交。 –until, –before 仅显示指定时间之前的提交。 –author 仅显示指定作者相关的提交。 –committer 仅显示指定提交者相关的提交。 –grep 仅显示含指定关键字的提交 -S 仅显示添加或移除了某个关键字的提交 一个实际的例子，如果要查看 Git 仓库中，2016 年 11 月1号到7号，作者叫苏的提交文件，可以用下面的查询命令： 12git log --pretty=&quot;%h - %s&quot; --author=苏 --since=&quot;2016-11-01&quot; \\ --before=&quot;2016-11-07&quot; 撤销操作amend重新提交 当我们commit之后突然发现漏掉了一个文件, 这个时候不可能对一个文件再进行commit一次, 这样做就显得很多余, 而如果版本回退之前再添加也比较麻烦. 这个时候就可以使用这个amend命令.如下: 123456$ git commit -m &quot;版本1.5开发代码&quot;# 正当你松了一口气的时候发现配置文件忘记修改了, 你赶紧修改,并适合用add到暂存区$ git add project.property$ git commit --amend # 你会神奇的发现你没有增加任何多余的操作就把漏掉的文件补齐到最后一次提交中 取消暂存的文件 就是对文件进行了git add操作. 这个时候可以reset 12# 让暂存区的文件变成文件修改但是没有添加暂存区的状态$ git reset HEAD fileName 撤销对文件的修改 场景: 当文件修改了, 但是还没有进行git add的时候还只是在工作区间, 还原成最后一次提交的内容 1$ git checkout -- filename 要注意使用, 使用之前确定是否要抛弃已经添加的内容. 因为这个动作可能让你最新添加的内容彻底丢失. 因为没有进行commit, 一般来说进行了commit的内容都是可以恢复的. 标签 Git可以给历史中的某一个提交打上标签, 以示重要. 比如每次正式版本的上线等. 列出标签 1234$ git tag# 如果你只关心某一部分的标签, 例如只对v2.x的标签感兴趣,你可以这样做$ git tag -l &apos;v2.*&apos; 创建标签 标签分为两种一种是附加标签另一种是轻量标签. 附加标签: 会保存打标签者的信息, 时间和附加信息. 最后更随打标签的提交 轻量标签: 只是在一个提交上做一个标记. 存储在一个专门保存标签的文件,指向提交的hash值 先来看附加标签: 1$ git tag -a v1.0 -m &apos;附加信息&apos; 轻量标签 1$ git tag v1.0 后期打标签, 就是对已经提交某次提交进行追加标签设置 12345# 可以先使用git log --oneline获取提交历史的hash值$ git log --oneline# 然后把hash值赋值到标签语句之后$ git tag -a v1.1 a6b4c97 共享标签 默认情况下, git push不会把标签传递到远程服务器. 需要显示的推送标签共享到服务器例如: git push origin [tagname] 1234$ git push origin v1.4# 如果想把本地上所有在远程服务器上的不存在标签删除掉,可以这样$ git push origin --tags 检出标签 git中不能真正的检出一个标签, 但是可以在标签处创建一个新的分支.如下 1$ git checkout -b checkbranch2 v2.0 查看标签对应的信息 使用git show &lt;标签名&gt;可以查看对应标签的详细信息, 如果git show这样的命令只是显示上次提交的内容 1$ git show v1.4 分支操作分支的创建分支的创建, 其实本质就是创建一个可以移动的指针,这个指针名就是新的分支名 12345678910$ git branch dev# 上面的只是创建了一个分支. 并没有切换, 可以使用一条命令创建并且换到新分支$ git checkout -b dev# 可以通过`git log`命令查看各个分支所指向的对象$ git log --oneline --decorate# 如果你想查看图形式的分叉历史,可以这样:$ git log --oneline --decorate --graph --all 分支的切换所谓的分支切换就是HEAD指针的指向的改变 1$ git checkout dev 分支合并利用git merge &lt;要合并到的目标分支&gt;, 这条命令会把当前所在分支与目标分支的内容合并, 可以这样理解, 如果当你试图向目标分支合并时, 如果当前分支可以顺着一个分支走下去, 那么本质上其实只是当前指针的向前移动, 由于这种情况下的合并并没有需要解决的分期, 所以git会称这个是fast-forward快速前进. 1git merge dev 删除分支当一个功能分支开发完毕之后, 并进行了合并, 通常这个分支也就被删除,以保证仓库中的干净. 12345# 删除dev分支$ git branch -d dev# 如果dev分支还有未提交的内容,为了保证你的数据安全git默认是不允许删除,可以使用`-D`强制删除$ git branch -D dev 分支管理git branch命令不只是可以创建于删除分支. 如果不添加任何参数, 那么会得到所有分支的一个列表 12345678910$ git branch # 其中一个分支前面的*代表,目前检出的分支就是HEAD指针所指向的分支# 追加-v参数 可以展示每一个分支最后一次提交$ git branch -v# --merged:查看那些分支已经合并到当前分支$ git branch --merged # 一般这个列表展示的除了*号的其他分支, 都可以删除# --no-merged:查看所有包含未合并工作的分支$ git branch --no-merged 变基 和合并merge相似的效果都是合并分支, 但是使用变基rebase可以让提交历史变得更简洁. 如下 图片1是merge合并效果, 图片2是rebase合并效果. 明显变基会让提交历史看起来更加干净. 使用如下: 123456# rebase &lt;目标分支名&gt; [需要移动变基底的分支]$ git rebase master experiment# 此时目标分支后面会追加另一个分支的提交. 此时只需要切换到master分支,合并分支即可.$ git checkout master$ git merge experiment rebase原理就是, 从目标分支和要变基的分支向上查找出共同祖先节点就是c2, 然后把要变基的分支到c2节点的所有提交,提取出相应的修改生成一个副本, 并追加到目标分创建相对应的提交. 此时变基的分支指向目标分支master的后面某一次提交. 此时只要使用修改master指向指针使用merge即可. 远程分支12345678# 获得远程的仓库列表$ git ls-remote origin# 如果想获得更多的信息$ git remote show origin# 查看远程分支和本地分支$ git branch -a 拉取远程分支 假设远程如果有一个dev分支, 你使用fetch进行抓取. 这个时候, 本地不会自动生成一个可编辑的副本, 换句话说就是这种情况下, 不会有一个新的dev本地分支, 只有一个不可以修改的origin/dev指针. 这个时候可以运行git merge origin/dev命令, 将这些远程dev分支的工作合并到当前分支. 如果想要在自己本地的dev分支上工作, 可以将其建立在远程分支之上. 1$ git checkout -b dev origin/dev 创建远程分支 如果你的本地有一个新建的dev分支, 并且你进行了提交, 此时你想把这个分支也提交到远程的dev分支, 但是远程还没有创建dev, 这个时候可以使用如下命令: git push &lt;远程仓库名&gt; &lt;要推送的本地分支&gt; 1$ git push origin dev 删除远程分支 12# 删除远程dev分支$ git push origin --delete dev 跟踪分支从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 跟踪分支（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。 当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支。 最简单的就是之前看到的例子，运行 git checkout -b [branch] [remotename]/[branch]。 这是一个十分常用的操作所以 Git 提供了 --track 快捷方式： 1234$ git checkout --track origin/dev# 如果想要自定义本地分支名字$ git checkout -b 任意分支名字 origin/dev 设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 –set-upstream-to 选项运行 git branch 来显式地设置。 12# 设置HEAD指向的分支的上游为远程dev分支$ git branch -u origin/dev 查看设置的所有跟踪分支 1$ git branch -vv 远程仓库操作克隆仓库1234$ git clone &lt;url&gt;# 如果你想创建自己的仓库名, 就是本地根文件夹的名称, 那么可以如下追加名称$ git clone &lt;url&gt; [dirName] 查看远程仓库12345# 默认查看远程仓库的方式$ git remote# 查看远程仓库的读写权限. 如果可以看到(push)说明提交的推送$ git remote -v 如果需要查看某一个仓库更多的信息时, 使用git remote show ... 1$ git remote show origin 添加远程仓库12345# 格式: git remote add [shortName] &lt;url&gt; 同时可以指定一个仓库的引用名称,例如$ git remote add rp git@github.com:suzeyu1992/GitOperateDemo.git# 此时你想对新加的远程进行拉取动作, 只需要使用之前的引用名称就可以$ git fetch rp 远程仓库的拉取推送拉取 大家常用的可能是git pull这个指令. 这个指令的通常会从服务器上抓取数据自动尝试合并到当前所在分支. 而我们可以也可以利用git fetch进行本地分支所追踪的远程分支没有提交. 然后我们可以手动的进行合并. 推送 git push [remote-name] [branch-name] 例如: 1$ git push origin master 只有当对服务器有写入权限, 并且之前没有人提交, 这条命令才会生效. 上面的这两个推送也好拉取也好. 如果所在分支设置了远程服务器分支的追踪, 那么可以省略掉后面的仓库名和分支名. 如果没有设置那么必须显示的指定. 远程仓库移除重命名对远程仓库的名称进行修改 1$ git remote rename oldName newName 想要移除一个远程仓库,例如服务器搬走了,不再使用一个特定镜像,或者一个贡献者不再贡献 1$ git remote rm 仓库名","link":"/2018/08/22/Resource/Resource-Git-Methods/"},{"title":"Little Things","text":"OSX el Capitan gem update error OSX el Capitan gem update error 1sudo gem install -n /usr/local/bin GEM_NAME_HERE Mac下隐藏或显示隐藏文件1234//显示： defaults write com.apple.finder AppleShowAllFiles -bool true//隐藏： defaults write com.apple.finder AppleShowAllFiles -bool false 修改textField的placeholder的字体颜色、大小123self.textField.placeholder = @\"username is in here!\";[self.textField setValue:[UIColor redColor] forKeyPath:@\"_placeholderLabel.textColor\"];[self.textField setValue:[UIFont boldSystemFontOfSize:16] forKeyPath:@\"_placeholderLabel.font\"]; 不规则图片1234_maskLayer = [CAShapeLayer layer]; _maskLayer.fillColor = [UIColor blackColor].CGColor; _maskLayer.strokeColor = [UIColor clearColor].CGColor; _maskLayer.frame = self.bounds; _maskLayer.contentsCenter = CGRectMake(0.5, 0.5, 0.1, 0.1); _maskLayer.contentsScale = [UIScreen mainScreen].scale; //非常关键设置自动拉伸的效果且不变形_maskLayer.contents = (id)[UIImage imageNamed:@\"gray_bubble_right@2x.png\"].CGImage; _contentLayer = [CALayer layer]; _contentLayer.mask = _maskLayer; _contentLayer.frame = self.bounds; [self.layer addSublayer:_contentLayer]; iOS NavigationBar 透明 OC 123[self.navigationController.navigationBar setBackgroundImage:[UIImage new] forBarMetrics:UIBarMetricsDefault];[self.navigationController.navigationBar setShadowImage:[UIImage new]];[self.navigationController.navigationBar setTranslucent:YES]; Swift 123self.navigationController?.navigationBar.setBackgroundImage(UIImage(),forBarMetrics: UIBarMetrics.Default)self.navigationController?.navigationBar.shadowImage = UIImage()self.navigationController?.navigationBar.translucent = true GithubPages1234567891011rm Gemfile.lockbundle install bundle exec jekyll servegit add --a git commit -m \"Edit something\"git push UIView转成UIImage123456789101112131415161718192021222324private func getImageFromView(view : UIView) -&gt; UIImage { UIGraphicsBeginImageContextWithOptions(view.bounds.size, true, 2) view.layer.renderInContext(UIGraphicsGetCurrentContext()!) let image : UIImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); return image;}private func getAnimationFrameForImage(image : UIImage?) -&gt; CGRect{ if (image == nil) { return CGRectZero } let imageSize = image!.size let aspect = imageSize.width / imageSize.height var animationFrame = CGRectZero; if (FTImageViewerScreenWidth / aspect &lt;= FTImageViewerScreenHeight) { animationFrame.size = CGSizeMake(FTImageViewerScreenWidth, FTImageViewerScreenWidth / aspect) }else { animationFrame.size = CGSizeMake(FTImageViewerScreenHeight * aspect, FTImageViewerScreenHeight); } animationFrame.origin.x = (FTImageViewerScreenWidth - animationFrame.size.width)/2.0 animationFrame.origin.y = (FTImageViewerScreenHeight - animationFrame.size.height)/2.0 return animationFrame;} 判断点击事件是否在某个范围内12345678-(void)onBackgroundViewTapped:(UIGestureRecognizer *)gesture{ if (CGRectContainsPoint(_popMenuView.frame, [gesture locationInView:_backgroundView])) { NSLog(@\"touch in subview\"); }else{ [self dismiss]; }} SQL排序123456789101112// Events sorted by date, defaults to ascendingvar events = Event.all(sort: \"when\") as! [Event]// Descendingvar descendingEvents = Event.all(sort:[\"when\":\"DESC\"]) as! [Event]// orvar descEvents = Event.all(sort:\"when DESC, eventID ASC\")// All meeting events sorted by when desc and eventID ascending and limit 10var theseEvents = Event.query([\"type\":\"meeting\"], sort:[\"when\":\"DESC\",\"eventID\":\"ASC\"], limit: 10) as! [Event]// NSSortDescriptor as sort arg (or array of NSSortDescriptorsEvent.all(sort: NSSortDescriptor(key:\"when\",ascending:true)) Trunk push1pod trunk push --allow-warnings --verbose FTDEMO Remove image colors1[image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate]","link":"/2018/08/22/Resource/Resource-Little-Things/"},{"title":"HTTPS 和 SSL/TLS 协议","text":"HTTPS 和 SSL/TLS 协议 相关背景知识 要说清楚 HTTPS 协议的实现原理，至少需要如下几个背景知识。大致了解几个基本术语（HTTPS、SSL、TLS）的含义。大致了解 HTTP 和 TCP 的关系（尤其是“短连接”VS“长连接”）。大致了解加密算法的概念（尤其是“对称加密与非对称加密”的区别）。大致了解 CA 证书的用途。 考虑到很多技术菜鸟可能不了解上述背景，俺先用最简短的文字描述一下。如果你自认为不是菜鸟，请略过本章节，直接去看“HTTPS 协议的需求”。 澄清几个术语——HTTPS、SSL、TLS1、“HTTP”是干嘛用滴？首先，HTTP 是一个网络协议，是专门用来帮你传输 Web 内容滴。关于这个协议，就算你不了解，至少也听说过吧？ 俺加了粗体的部分就是指 HTTP 协议。大部分网站都是通过 HTTP 协议来传输 Web 页面、以及 Web 页面上包含的各种东东（图片、CSS 样式、JS 脚本）。 2、“SSL/TLS”是干嘛用滴？SSL 是洋文“Secure Sockets Layer”的缩写，中文叫做“安全套接层”。它是在上世纪90年代中期，由网景公司设计的。（顺便插一句，网景公司不光发明了 SSL，还发明了很多 Web 的基础设施——比如“CSS 样式表”和“JS 脚本”） 为啥要发明 SSL 这个协议捏？因为原先互联网上使用的 HTTP 协议是明文的，存在很多缺点——比如传输内容会被偷窥（嗅探）和篡改。发明 SSL 协议，就是为了解决这些问题。 到了1999年，SSL 因为应用广泛，已经成为互联网上的事实标准。IETF 就在那年把 SSL 标准化。标准化之后的名称改为 TLS（是“Transport Layer Security”的缩写），中文叫做“传输层安全协议”。 很多相关的文章都把这两者并列称呼（SSL/TLS），因为这两者可以视作同一个东西的不同阶段。 3、“HTTPS”是啥意思？解释完 HTTP 和 SSL/TLS，现在就可以来解释 HTTPS 啦。咱们通常所说的 HTTPS 协议，说白了就是“HTTP 协议”和“SSL/TLS 协议”的组合。 你可以把 HTTPS 大致理解为——“HTTP over SSL”或“HTTP over TLS”（反正 SSL 和 TLS 差不多）。 再来说说 HTTP 协议的特点作为背景知识介绍，还需要再稍微谈一下 HTTP 协议本身的特点。HTTP 本身有很多特点，考虑到篇幅有限，俺只谈那些和 HTTPS 相关的特点。 1、HTTP 的版本和历史如今咱们用的 HTTP 协议，版本号是 1.1（也就是 HTTP 1.1）。这个 1.1 版本是1995年底开始起草的（技术文档是 RFC2068），并在1999年正式发布（技术文档是 RFC2616）。 在 1.1 之前，还有曾经出现过两个版本“0.9 和 1.0”，其中的 HTTP 0.9 【没有】被广泛使用，而 HTTP 1.0 被广泛使用过。 2、HTTP 和 TCP 之间的关系简单地说，TCP 协议是 HTTP 协议的基石——HTTP 协议需要依靠 TCP 协议来传输数据。 在网络分层模型中，TCP 被称为“传输层协议”，而 HTTP 被称为“应用层协议”。 有很多常见的应用层协议是以 TCP 为基础的，比如“FTP、SMTP、POP、IMAP”等。 TCP 被称为“面向连接”的传输层协议。关于它的具体细节，俺就不展开了（否则篇幅又失控了）。你只需知道：传输层主要有两个协议，分别是 TCP 和 UDP。TCP 比 UDP 更可靠。你可以把 TCP 协议想象成某个水管，发送端这头进水，接收端那头就出水。并且 TCP 协议能够确保，先发送的数据先到达（与之相反，UDP 不保证这点）。 3、HTTP 协议如何使用 TCP 连接？HTTP 对 TCP 连接的使用，分为两种方式：俗称“短连接”和“长连接”（“长连接”又称“持久连接”，洋文叫做“Keep-Alive”或“Persistent Connection”） 假设有一个网页，里面包含好多图片，还包含好多【外部的】CSS 文件和 JS 文件。 在“短连接”的模式下，浏览器会先发起一个 TCP 连接，拿到该网页的 HTML 源代码（拿到 HTML 之后，这个 TCP 连接就关闭了）。然后，浏览器开始分析这个网页的源码，知道这个页面包含很多外部资源（图片、CSS、JS）。然后针对【每一个】外部资源，再分别发起一个个 TCP 连接，把这些文件获取到本地（同样的，每抓取一个外部资源后，相应的 TCP 就断开） 相反，如果是“长连接”的方式，浏览器也会先发起一个 TCP 连接去抓取页面。但是抓取页面之后，该 TCP 连接并不会立即关闭，而是暂时先保持着（所谓的“Keep-Alive”）。然后浏览器分析 HTML 源码之后，发现有很多外部资源，就用刚才那个 TCP 连接去抓取此页面的外部资源。 在 HTTP 1.0 版本，【默认】使用的是“短连接”（那时候是 Web 诞生初期，网页相对简单，“短连接”的问题不大）； 到了1995年底开始制定 HTTP 1.1 草案的时候，网页已经开始变得复杂（网页内的图片、脚本越来越多了）。这时候再用短连接的方式，效率太低下了（因为建立 TCP 连接是有“时间成本”和“CPU 成本”滴）。所以，在 HTTP 1.1 中，【默认】采用的是“Keep-Alive”的方式。 关于“Keep-Alive”的更多介绍，可以参见维基百科词条。 谈谈“对称加密”和“非对称加密”的概念1、啥是“加密”和“解密”？通俗而言，你可以把“加密”和“解密”理解为某种【互逆的】数学运算。就好比“加法和减法”互为逆运算、“乘法和除法”互为逆运算。 “加密”的过程，就是把“明文”变成“密文”的过程；反之，“解密”的过程，就是把“密文”变为“明文”。在这两个过程中，都需要一个关键的东东——叫做“密钥”——来参与数学运算。 2、啥是“对称加密”？所谓的“对称加密技术”，意思就是说：“加密”和“解密”使用【相同的】密钥。这个比较好理解。 就好比你用 7zip 或 WinRAR 创建一个带密码（口令）的加密压缩包。当你下次要把这个压缩文件解开的时候，你需要输入【同样的】密码。在这个例子中，密码/口令就如同刚才说的“密钥”。 3、啥是“非对称加密”？所谓的“非对称加密技术”，意思就是说：“加密”和“解密”使用【不同的】密钥。这玩意儿比较难理解，也比较难想到。当年“非对称加密”的发明，还被誉为“密码学”历史上的一次革命。 由于篇幅有限，对“非对称加密”这个话题，俺就不展开了。有空的话，再单独写一篇扫盲。 4、各自有啥优缺点？看完刚才的定义，很显然：（从功能角度而言）“非对称加密”能干的事情比“对称加密”要多。这是“非对称加密”的优点。但是“非对称加密”的实现，通常需要涉及到“复杂数学问题”。所以，“非对称加密”的性能通常要差很多（相对于“对称加密”而言）。 这两者的优缺点，也影响到了 SSL 协议的设计。 CA 证书的原理及用途 关于这方面，请看俺4年前写的《数字证书及CA的扫盲介绍》。这里就不再重复唠叨了，免得篇幅太长。 HTTPS 协议的需求是啥？ 花了好多口水，终于把背景知识说完了。下面正式进入正题。先来说说当初设计 HTTPS 是为了满足哪些需求？ 很多介绍 HTTPS 的文章一上来就给你讲实现细节。个人觉得：这是不好的做法。 早在2009年开博的时候，发过一篇《学习技术的三部曲：WHAT、HOW、WHY》，其中谈到“WHY 型问题”的重要性。一上来就给你讲协议细节，你充其量只能知道 WHAT 和 HOW，无法理解 WHY。 俺在前一个章节讲了“背景知识”，在这个章节讲了“需求”，这就有助于你理解：当初为什么要设计成这样？——这就是 WHY 型的问题。 兼容性 因为是先有 HTTP 再有 HTTPS。所以，HTTPS 的设计者肯定要考虑到对原有 HTTP 的兼容性。 这里所说的兼容性包括很多方面。比如已有的 Web 应用要尽可能无缝地迁移到 HTTPS；比如对浏览器厂商而言，改动要尽可能小；…… 基于“兼容性”方面的考虑，很容易得出如下几个结论： 1、HTTPS 还是要基于 TCP 来传输 （如果改为 UDP 作传输层，无论是 Web 服务端还是浏览器客户端，都要大改，动静太大了） 2、单独使用一个新的协议，把 HTTP 协议包裹起来 （所谓的“HTTP over SSL”，实际上是在原有的 HTTP 数据外面加了一层 SSL 的封装。HTTP 协议原有的 GET、POST 之类的机制，基本上原封不动） 打个比方：如果原来的 HTTP 是塑料水管，容易被戳破；那么如今新设计的 HTTPS 就像是在原有的塑料水管之外，再包一层金属水管。一来，原有的塑料水管照样运行；二来，用金属加固了之后，不容易被戳破。 可扩展性 前面说了，HTTPS 相当于是“HTTP over SSL”。 如果 SSL 这个协议在“可扩展性”方面的设计足够牛逼，那么它除了能跟 HTTP 搭配，还能够跟其它的应用层协议搭配。岂不美哉？ 现在看来，当初设计 SSL 的人确实比较牛。如今的 SSL/TLS 可以跟很多常用的应用层协议（比如：FTP、SMTP、POP、Telnet）搭配，来强化这些应用层协议的安全性。 接着刚才打的比方：如果把 SSL/TLS 视作一根用来加固的金属管，它不仅可以用来加固输水的管道，还可以用来加固输煤气的管道。 保密性（防泄密） HTTPS 需要做到足够好的保密性。 说到保密性，首先要能够对抗嗅探（行话叫 Sniffer）。所谓的“嗅探”，通俗而言就是监视你的网络传输流量。如果你使用明文的 HTTP 上网，那么监视者通过嗅探，就知道你在访问哪些网站的哪些页面。 嗅探是最低级的攻击手法。除了嗅探，HTTPS 还需要能对抗其它一些稍微高级的攻击手法——比如“重放攻击”（后面讲协议原理的时候，会再聊）。 完整性（防篡改） 除了“保密性”，还有一个同样重要的目标是“确保完整性”。关于“完整性”这个概念，在之前的博文《扫盲文件完整性校验——关于散列值和数字签名》中大致提过。健忘的同学再去温习一下。 在发明 HTTPS 之前，由于 HTTP 是明文的，不但容易被嗅探，还容易被篡改。 举个例子： 比如咱们天朝的网络运营商（ISP）都比较流氓，经常有网友抱怨说访问某网站（本来是没有广告的），竟然会跳出很多中国电信的广告。为啥会这样捏？因为你的网络流量需要经过 ISP 的线路才能到达公网。如果你使用的是明文的 HTTP，ISP 很容易就可以在你访问的页面中植入广告。 所以，当初设计 HTTPS 的时候，还有一个需求是“确保 HTTP 协议的内容不被篡改”。 真实性（防假冒） 在谈到 HTTPS 的需求时，“真实性”经常被忽略。其实“真实性”的重要程度不亚于前面的“保密性”和“完整性”。 举个例子： 你因为使用网银，需要访问该网银的 Web 站点。那么，你如何确保你访问的网站确实是你想访问的网站？（这话有点绕口令） 有些天真的同学会说：通过看网址里面的域名，来确保。为啥说这样的同学是“天真的”？因为 DNS 系统本身是不可靠的（尤其是在设计 SSL 的那个年代，连 DNSSEC 都还没发明）。由于 DNS 的不可靠（存在“域名欺骗”和“域名劫持”），你看到的网址里面的域名【未必】是真实滴！ 所以，HTTPS 协议必须有某种机制来确保“真实性”的需求（至于如何确保，后面会细聊）。 性能 再来说最后一个需求——性能。 引入 HTTPS 之后，【不能】导致性能变得太差。否则的话，谁还愿意用？ 为了确保性能，SSL 的设计者至少要考虑如下几点： 如何选择加密算法（“对称”or“非对称”）？如何兼顾 HTTP 采用的“短连接”TCP 方式？ （SSL 是在1995年之前开始设计的，那时候的 HTTP 版本还是 1.0，默认使用的是“短连接”的 TCP 方式——默认不启用 Keep-Alive） 小结 以上就是设计 SSL 协议时，必须兼顾的各种需求。后面聊协议的实现时，俺会拿 SSL 协议的特点跟前面的需求作对照。看看这些需求是如何一一满足滴。 设计 HTTPS 协议的主要难点设计 HTTPS 这个协议，有好几个难点。俺个人认为最大的难点在于“密钥交换”。 在传统的密码学场景中，假如张三要跟李四建立一个加密通讯的渠道，双方事先要约定好使用哪种加密算法？同时也要约定好使用的密钥是啥？在这个场景中，加密算法的【类型】让旁人知道，没太大关系。但是密钥【千万不能】让旁人知道。一旦旁人知道了密钥，自然就可以破解通讯的密文，得到明文。 好，现在回到 HTTPS 的场景。 当你访问某个公网的网站，你的浏览器和网站的服务器之间，如果要建立加密通讯，必然要商量好双方使用啥算法，啥密钥。——在网络通讯术语中，这个过程称之为“握手/handshake”。 在握手阶段，因为加密方式还没有协商好，所以握手阶段的通讯必定是【明文】滴！既然是明文，自然有可能被第三方偷窥到。然后，还要考虑到双方之间隔着一个互联网，什么样的偷窥都可能发生。 因此，在握手的过程中，如何做到安全地交换密钥信息，而不让周围的第三方看到。这就是设计 HTTPS 最大的难点。 结尾本文费这么多口水，来介绍 HTTPS 的“需求”和“难点”，为啥捏？因为只有当你了解这些，后面介绍 SSL/TLS 的实现原理时，你才能理解——当初为啥要把协议设计成这个样子。","link":"/2018/08/22/Resource/Resource-HTTPS 和 SSL:TLS 协议/"},{"title":"Server Side Swift","text":"Server Side Swift Perfect PerfectProject PerfectExamples PerfectServer","link":"/2018/08/22/Resource/Resource-Server-Side-Swift/"},{"title":"PageMenus Resource","text":"PageMenusXLPagerTabStripXLPagerTabStrip is a Container View Controller that allows us to switch easily among a collection of view controllers. Pan gesture can be used to move on to next or previous view controller. It shows a interactive indicator of the current, previous, next child view controllers.XLPagerTabStrip Swift PageMenuA fully customizable and flexible paging menu controller built from other view controllers placed inside a scroll view allowing the user to switch between any kind of view controller with an easy tap or swipe gesture similar to what Spotify, Windows Phone, and Instagram usePageMenu Swift","link":"/2018/08/22/Resource/Resource-PageMenus-Resource/"},{"title":"iOS Extension Add Property Using RunTime","text":"Objective-C UISwitch+WithKey.h 12345678import &lt;UIKit/UIKit.h&gt;@interface UISwitch (WithKey)@property (nonatomic,strong)NSString *keyString;@end UISwitch+WithKey.m 123456789101112131415161718import &quot;UISwitch+WithKey.h&quot;import &lt;objc/runtime.h&gt;@implementation UISwitch (WithKey)static char keyStringKey;-(NSString *)keyString{ return objc_getAssociatedObject(self, &amp;keyStringKey);}-(void)setKeyString:(NSString *)keyString{ objc_setAssociatedObject(self, &amp;keyStringKey, keyString, OBJC_ASSOCIATION_RETAIN_NONATOMIC);}@end Swift12345678910111213141516import UIKitimport ObjectiveCprivate var FTPullToRefreshHeaderViewAssociateKey = 0extension UIScrollView { var headerView : FTPullToRefreshView! { get { return objc_getAssociatedObject(self, &amp;FTPullToRefreshHeaderViewAssociateKey) as! FTPullToRefreshView } set { objc_setAssociatedObject(self,&amp;FTPullToRefreshHeaderViewAssociateKey,newValue,objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN) } }}","link":"/2018/08/22/Resource/Resource-iOS-Extension-Add-Property-Using-RunTime/"},{"title":"Useful Blogs","text":"Useful BlogsCollecting articles, little bit of disordered. Resources travis shields Github上的iOS开源项目 Github 上的 iOS 开源项目 GitHub 上 iOS 开源库 Top 100 Certificate IOS Push证书的重新生成 CocoaPods Cocoapods Trunk 从零开始，让你的框架支持CocoaPods 在Swift怎样创建CocoaPods App本地化 XLIFF本地化 免费工具 Git mac系统配置多个git账号 如何在一个电脑上同时使用两个Git的账号 How To Change Localization Internally In Your iOS Application How To Change Localization Internally In Your iOS Application ios_language_manager 正则 REX CocoaChina Resources 墙裂推荐 iOS 资源大全 iOS开发大神必备的Xcode插件 FDFullscreenPopGesture FDFullscreenPopGesture iOS开发：点击系统的返回按钮，返回到指定的视图 iOS开发：点击系统的返回按钮，返回到指定的视图 iOS打开系统设置*iOS打开系统设置","link":"/2018/08/22/Resource/Resource-Useful-Blogs/"},{"title":"Random thoughts","text":"Random ThoughtsI commented all of these. 2016.08.16","link":"/2018/08/22/Thoughts/Thoughts-Random-Thoughts/"}],"tags":[{"name":"Journal","slug":"Journal","link":"/tags/Journal/"},{"name":"Project","slug":"Project","link":"/tags/Project/"},{"name":"Resource","slug":"Resource","link":"/tags/Resource/"},{"name":"Thoughts","slug":"Thoughts","link":"/tags/Thoughts/"}],"categories":[{"name":"Journal","slug":"Journal","link":"/categories/Journal/"},{"name":"Project","slug":"Project","link":"/categories/Project/"},{"name":"Resource","slug":"Resource","link":"/categories/Resource/"},{"name":"Thoughts","slug":"Thoughts","link":"/categories/Thoughts/"}]}